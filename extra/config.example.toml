[env]
# Branch can be set via command line as well, empty will genreate backwards-compatible update structure
branch = ""
# Directories for building (can be overriden via command line)
input_dir = "C:/Path/to/build"
output_dir = "C:/Path/to/output"
previous_dir = "C:/path/to/previous/versions"
# Utilities
sevenzip_path = "C:/path/to/7z.exe"
makensis_path = "C:/Path/to/makensis.exe"
pandoc_path = "C:/path/to/pandoc.exe"
pdbcopy_path = "C:/Program Files (x86)/Windows Kits/10/Debuggers/x64/pdbcopy.exe"
# signtool is found automatically

## Preparation steps
[prepare]
empty_output_dir = false

[prepare.copy]

# These files will *never* be copied
excludes = [
    "bin/32bit",
    "obs-plugins/32bit",
]

# Overrides/adds files during copy step. These files will NOT be signed or stripped
# overrides = [
#     ["data/obs-plugins/win-capture/graphics-hook64.dll", "C:/path/to/override/graphics-hook64.dll"],
#     ["data/obs-plugins/win-capture/graphics-hook64.pdb", "C:/path/to/override/graphics-hook64.pdb"],
# ]

# Overrides/adds files during copy step. These files WILL be signed and stripped
# overrides_sign = [
#     ["data/obs-plugins/win-capture/graphics-hook32.dll", "C:/path/to/override/graphics-hook32.dll"],
#     ["data/obs-plugins/win-capture/graphics-hook32.pdb", "C:/path/to/override/graphics-hook32.pdb"],
# ]

# NOTE: The following two options are mutually exclusive, and should be specified via the command line switches instead
# Files matching these will be copied from the latest previous build instead
# exclude = ["win-capture"]
# Files not matching these will be copied from the latest previous build instead
# include = ["win-dshow"]

[prepare.codesign]
skip_sign = false
sign_name = "OBS Test"
sign_digest = "sha512"
sign_ts_serv = "http://timestamp.digicert.com"
sign_exts = ['exe', 'dll', 'pyd']

[prepare.strip_pdbs]
# PDBs to not strip
exclude = [
    "obs-frontend-api.pdb",
    "obs64.pdb",
    "obs.pdb",
]
# Do not strip PDBs for pre-release builds
skip_for_prerelease = true

## Delta patch generation
[generate]
# Maybe in the future there will be more!
# patch_type = "bsdiff_lzma"

# eclude files matching these patterns from being removed automatically
# (e.g. legacy plugins no longer shipped with OBS but aren't broken yet)
exclude_from_removal = [
    "bin/32bit",
    "obs-plugins/32bit",
]

# Files matching these patterns will not be processed in parallel to reduce RAM usage
exclude_from_parallel = []

# Removed files are detected automatically, but if the removal cannot be detected automatically,
# e.g. because the affected old version is no longer used in generating patches, specify them here.
# Note: this will be added to the corresponding package based on the include filter!
removed_files = [
    "obs-plugins/64bit/decklink-ouput-ui.dll"
]

# not implemented yet
# skip_for_prerelease = true

# Packages are processed in the specified order.
# A package without include filters will be assigned any remaining files
[[generate.packages]]
name = "obs-browser"
# Only include files matching the specified patterns
include_files = [
    "obs-browser",
    "locales/",
    "cef.pak",
    "cef_100_percent.pak",
    "cef_200_percent.pak",
    "cef_extensions.pak",
    "cef-bootstrap.exe",
    "cef-bootstrap.pdb",
    "obs-browser-page.exe",
    "obs-browser-page.pdb",
    "chrome_elf.dll",
    "devtools_resources.pak",
    "icudtl.dat",
    "libcef.dll",
    "libEGL.dll",
    "libGLESv2.dll",
    "natives_blob.bin",
    "obs-browser.dll",
    "obs-browser.pdb",
    "snapshot_blob.bin",
    "v8_context_snapshot.bin",
]

[[generate.packages]]
# catches all remaining
name = "core"

## Packaging steps
[package]

[package.installer]
nsis_script = "C:/Path/to/installer.nsi"
# not implemented yet (requires NSIS script updates)
# name = "OBS-Studio-{version}.exe"
skip_sign = false

[package.zip]
# Note: {version} will be <Major>.<Minor>[.<Patch>] and suffixied with "-rc<Num>" or "-beta<Num>" if provided
name = "OBS-Studio-{version}.zip"
pdb_name = "OBS-Studio-{version}-pdbs.zip"
# Skip PDB generation for pre-release
skip_pdbs_for_prerelease = true

[package.updater]
skip_sign = true
# alternatively, the key may be specified as base64 encoded PEM/DER in an environment variables (UPDATER_PRIVATE_KEY)
private_key = "C:/Path/to/privkey.pem"
# not implemented yet (use bouf-sign to sign updater.exe separately if required)
# updater_path = "C:/Path/to/updater.exe"
vc_redist_path = "C:/path/to/vcredist"
# File containing release notes, should be a pandoc compatible format (e.g. RST or Markdown)
notes_file = "C:/path/to/release_notes.rst"

[post]
# move processed input directory to "previous" folder after packaging is done
copy_to_old = true
